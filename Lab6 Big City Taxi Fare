import pandas as pd
from keras.models import Sequential
from keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Load data
df = pd.read_csv('NYC_taxi_fares-2.csv')

# Remove rows with missing values
df = df.dropna()

# Calculate Euclidean distance
def euc_distance(lat1, long1, lat2, long2):
    return (((lat1 - lat2) ** 2 + (long1 - long2) ** 2) ** 0.5)

df['distance'] = euc_distance(df['pickup_latitude'], df['pickup_longitude'], df['dropoff_latitude'], df['dropoff_longitude'])

# Selecting features and target variable
X = df[['distance', 'passenger_count']]  # including passenger_count as a feature, you can include other relevant features
y = df['fare_amount']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Define model
model = Sequential()
model.add(Dense(128, input_dim=X_train.shape[1], activation='relu'))  # the number of neurons and layers
model.add(Dense(64, activation='relu'))
model.add(Dense(1, activation='linear'))  # linear activation for regression

# Compile model
model.compile(loss='mean_squared_error', optimizer='adam')

# Train model
model.fit(X_train, y_train, epochs=100, batch_size=32, validation_data=(X_test, y_test))  # you can tune epochs and batch_size

# Evaluate the model
loss = model.evaluate(X_test, y_test)
print(f'Test loss: {loss}')

# Make predictions on new data
# predictions = model.predict(new_data)
